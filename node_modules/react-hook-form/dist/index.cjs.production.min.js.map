{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport {\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef?: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  return (\n    unmountFieldsStateRef?.current[name] || defaultValuesRef?.current[name]\n  );\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport {\n  Field,\n  FieldRefs,\n  FieldValues,\n  Ref,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(\n      fieldsRef,\n      name,\n      unmountFieldsStateRef,\n      defaultValuesRef,\n    );\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport transformToNestObject from './transformToNestObject';\nimport { DeepPartial } from '../types/utils';\nimport {\n  InternalFieldName,\n  FieldValues,\n  FieldRefs,\n  UnpackNestedValue,\n  FieldValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef?: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return {\n    ...transformToNestObject((defaultValuesRef || {}).current || {}),\n    ...transformToNestObject(unmountFieldsStateRef.current),\n    ...transformToNestObject(output),\n  };\n};\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      unmountFieldsStateRef,\n      defaultValuesRef,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n}: {\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isReValidateOnBlur: boolean;\n  isReValidateOnChange: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted: boolean;\n}) => {\n  if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const {\n    current: { isOnBlur, isOnSubmit, isOnChange, isOnAll },\n  } = React.useRef(modeChecker(mode));\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef, defaultValuesRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n          defaultValuesRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isOnChange,\n              isOnBlur,\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolver) {\n            const { errors } = await resolver(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n              defaultValuesRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(\n        fieldsRef,\n        payload,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n      );\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(\n            fieldsRef,\n            name,\n            unmountFieldsStateRef,\n            defaultValuesRef,\n          ),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef, defaultValuesRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production' && !ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n          defaultValuesRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(\n        fieldsRef,\n        name,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n      );\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n                defaultValuesRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name] || [],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode: { isOnChange, isOnBlur },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      isOnBlur,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","defaultValuesRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","isString","startsWith","find","transformToNestObject","error","types","message","every","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","forEach","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","setValue","register","unregister","trigger","reValidateMode","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","shouldValidate","skipValidation","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","shouldRender","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","_b","reset","pop","shouldRenderUseWatch","watchField","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}