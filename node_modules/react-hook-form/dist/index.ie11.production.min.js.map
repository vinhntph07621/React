{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport {\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef?: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  return (\n    unmountFieldsStateRef?.current[name] || defaultValuesRef?.current[name]\n  );\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport {\n  Field,\n  FieldRefs,\n  FieldValues,\n  Ref,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(\n      fieldsRef,\n      name,\n      unmountFieldsStateRef,\n      defaultValuesRef,\n    );\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport transformToNestObject from './transformToNestObject';\nimport { DeepPartial } from '../types/utils';\nimport {\n  InternalFieldName,\n  FieldValues,\n  FieldRefs,\n  UnpackNestedValue,\n  FieldValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef?: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return {\n    ...transformToNestObject((defaultValuesRef || {}).current || {}),\n    ...transformToNestObject(unmountFieldsStateRef.current),\n    ...transformToNestObject(output),\n  };\n};\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n  FieldValue,\n  UnpackNestedValue,\n} from '../types/form';\nimport { DeepPartial } from '../types/utils';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  defaultValuesRef: React.MutableRefObject<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      unmountFieldsStateRef,\n      defaultValuesRef,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n}: {\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isReValidateOnBlur: boolean;\n  isReValidateOnChange: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted: boolean;\n}) => {\n  if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const {\n    current: { isOnBlur, isOnSubmit, isOnChange, isOnAll },\n  } = React.useRef(modeChecker(mode));\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef, defaultValuesRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n          defaultValuesRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isOnChange,\n              isOnBlur,\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolver) {\n            const { errors } = await resolver(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n              defaultValuesRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(\n        fieldsRef,\n        payload,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n      );\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(\n            fieldsRef,\n            name,\n            unmountFieldsStateRef,\n            defaultValuesRef,\n          ),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef, defaultValuesRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production' && !ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n          defaultValuesRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(\n        fieldsRef,\n        name,\n        unmountFieldsStateRef,\n        defaultValuesRef,\n      );\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n                defaultValuesRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name] || [],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode: { isOnChange, isOnBlur },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      isOnBlur,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","defaultValuesRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","transformToNestObject","error","_b","types","message","every","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","forEach","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","setValue","register","unregister","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","reValidateMode","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}